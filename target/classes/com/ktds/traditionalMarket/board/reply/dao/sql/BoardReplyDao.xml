<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="BoardReplyDao">

	<!-- 댓글 작성 -->
	<insert id="insertOneBoardReply" parameterType="BoardReplyVO">
		INSERT INTO BOARD_REPLY (
									BOARD_REPLY_ID
									, REPLY
									, CRT_DATE
									, MEMBER_ID
									, BOARD_ID
									, PARENT_REPLY_ID
								) 
		VALUES 					( 
									'RP-' || TO_CHAR(SYSDATE, 'YYYYMMDDHH24') || '-' || LPAD(BOARDREPLY_ID_SEQ.NEXTVAL, 6, 0)
									, #{reply} 
									, SYSDATE 
									, #{memberId}
									, #{boardId}
									, #{parentReplyId}
								)
	</insert>
	
	
	<!-- 그 게시글안에 있는 댓글 전체 삭제 -->
	<delete id="deleteOneBoardReplies" parameterType="string">
		DELETE	
		FROM	BOARD_REPLY
		WHERE	BOARD_ID = #{boardId}
	</delete>
	
	<!-- 하나의 댓글 삭제 -->
	<delete id="deleteOneBoardReply" parameterType="string">
		DELETE	
		FROM	BOARD_REPLY
		WHERE	BOARD_REPLY_ID = #{boardReplyId}
	</delete>
	
	
	<!-- Join된 query를 쓸 때는 무조건 "resultMap"을 써준다. query결과를 객체와 매핑시켜준다. -->
	<!-- "BoardReplyVO"라는 타입 클래스로 결과를 매핑하겠다. -->
	<resultMap type="BoardReplyVO" id="boardReplyVOMap">	
		<!-- id는 PK를 뜻함, column="DB컬럼명" property="VO변수명"-->					
		<id column="BOARD_REPLY_ID" property="boardReplyId"/>			
		<result column="REPLY" property="reply"/>
		<result column="BR_CRT_DATE" property="crtDate"/>
		<result column="BR_MEMBER_ID" property="memberId"/>
		<result column="BR_BOARD_ID" property="boardId"/>
		<result column="PARENT_REPLY_ID" property="parentReplyId"/>
		<result column="LEVEL" property="level"/>
		<!-- 객체가 다른 객체한테...이렇게 함으로써 BoardReplyVO에 BoardVO, MemberVO를 가지게 됨.  -->
		<association property="boardVO" javaType="BoardVO">	
			<id property="boardId" column="B_BOARD_ID"/>			<!-- PK -->
			<result property="title" column="TITLE"/>
			<result property="content" column="CONTENT"/>
			<result property="crtDate" column="B_CRT_DATE"/>
			<result property="mdfyDate" column="MDFY_DATE"/>
			<result property="viewCount" column="VIEW_COUNT"/>
			<result property="recommendCount" column="RECOMMEND_COUNT"/>
			<result property="picture" column="PICTURE"/>
			<result property="memberId" column="B_MEMBER_ID"/>
		</association>
		<association property="memberVO" javaType="MemberVO">	
			<id property="memberId" column="R_M_MEMBER_ID"/>
			<result property="name" column="NAME"/>
			<result property="password" column="PASSWORD"/>
			<result property="salt" column="SALT"/>
			<result property="point" column="POINT"/> 
			<result property="membership" column="MEMBERSHIP"/>
			<result property="email" column="EMAIL"/>
			<result property="birth" column="BIRTH"/>
			<result property="loginFailCount" column="LOGIN_FAIL_COUNT"/>
			<result property="loginFailTime" column="LOGIN_FAIL_TIME"/>
		</association>		
	</resultMap>

	
	<!-- 전체 댓글 -->
	<select id="selectAllBoardReplies" parameterType="string" resultMap="boardReplyVOMap">
		SELECT	LEVEL
				, BR.BOARD_REPLY_ID 
				, BR.REPLY 
				, BR.CRT_DATE BR_CRT_DATE
				, BR.MEMBER_ID BR_MEMBER_ID
				, BR.BOARD_ID BR_BOARD_ID
				, BR.PARENT_REPLY_ID
				, B.BOARD_ID B_BOARD_ID
				, B.TITLE
				, B.CONTENT 
				, B.CRT_DATE B_CRT_DATE
				, B.MDFY_DATE
				, B.VIEW_COUNT		
				, B.RECOMMEND_COUNT
				, B.PICTURE
				, B.MEMBER_ID B_MEMBER_ID
				, R_M.MEMBER_ID R_M_MEMBER_ID
				, R_M.NAME
				, R_M.PASSWORD
				, R_M.SALT
				, R_M.POINT
				, R_M.MEMBERSHIP
				, R_M.EMAIL
				, R_M.BIRTH
				, R_M.LOGIN_FAIL_COUNT
				, R_M.LOGIN_FAIL_TIME
		FROM	BOARD_REPLY BR
				, BOARD B
				, MEMBER B_M
				, MEMBER R_M
		WHERE	B.MEMBER_ID = B_M.MEMBER_ID
		AND		BR.MEMBER_ID = R_M.MEMBER_ID
		AND		BR.BOARD_ID = B.BOARD_ID
		AND		B.BOARD_ID = #{boardId}
		<!-- ORDER	BY BR.CRT_DATE DESC -->
 		START	WITH BR.PARENT_REPLY_ID = '0'	<!-- 댓댓글만들기위해서 사용함! -->
		CONNECT BY PRIOR BR.BOARD_REPLY_ID = BR.PARENT_REPLY_ID	 
	</select>
	
	
	
<!-- 	<select id="" parameterType="string" resultType="BoardReplyVO">
		SELECT	MEMBER_ID
		FROM	BOARD_REPLY
		WHERE	MEMBER_ID = #{memberId}
		AND		BOARD_ID = #{boardId}
	</select> -->
	
	<!-- 좋아요를 한 댓글과 회원정보 -->
	<insert id="insertOneBoardReplyGood" parameterType="map">
		INSERT INTO GOOD (
   							BOARD_REPLY_ID
   							, MEMBER_ID
   						  ) 
		VALUES ( 
					#{boardReplyId}
 					, #{memberId}
 		       )			
	</insert>
	
	<!-- 싫어요를 한 댓글과 회원정보 -->
	<insert id="insertOneBoardReplyBad" parameterType="map">
		INSERT INTO BAD (
   							BOARD_REPLY_ID
   							, MEMBER_ID
   						  ) 
		VALUES ( 
					#{boardReplyId}
 					, #{memberId}
 		       )			
	</insert>
	
	
	<!-- 댓글의 좋아요 총 수 -->
	<select id="selectOneBoardReplyGoodCount" parameterType="string" resultType="int">
		SELECT 	COUNT(1)
		FROM	GOOD
		WHERE	BOARD_REPLY_ID = #{boardReplyId}
	</select>
	
	<!-- 댓글의 싫어요 총 수 -->
	<select id="selectOneBoardReplyBadCount" parameterType="string" resultType="int">
		SELECT 	COUNT(1) 
		FROM	BAD
		WHERE	BOARD_REPLY_ID = #{boardReplyId}
	</select>
	
	
	<!-- 해당 댓글에 좋아요를 한 회원이 다시 취소하기 -->
	<delete id="deleteOneBoardReplyGood" parameterType="map">
		DELETE
		FROM	GOOD
		WHERE	BOARD_REPLY_ID = #{boardReplyId}
		AND		MEMBER_ID = #{memberId}
	</delete>
	
	<!-- 해당 댓글에 싫어요를 한 회원이 다시 취소하기 -->
		<delete id="deleteOneBoardReplyBad" parameterType="map">
		DELETE
		FROM	BAD
		WHERE	BOARD_REPLY_ID = #{boardReplyId}
		AND		MEMBER_ID = #{memberId}
	</delete>
	
	
	
<!--  	<resultMap type="GoodVO" id="GoodVOMap">
		id는 PK를 뜻함, column="DB컬럼명" property="VO변수명"					
		<id column="BOARD_REPLY_ID" property="boardReplyId"/>		PK		
		<id column="MEMBER_ID" property="memberId"/>				PK
		<result column="GOOD_COUNT" property="goodCount"/>
		<association property="badVO" javaType="BadVO">	
			<id property="BOARD_REPLY_ID" column="B_BOARD_ID"/>		PK
			<id property="MEMBER_ID" column="memberId"/>			PK
			<result property="BAD_COUNT" column="badCount"/>
		</association>
	</resultMap> -->
	
	
	
	<!-- 중요한 사실!!!!!!!!!!!!!!!!!!!!!!!! select에서 resultType을 사용할시에 별칭을 무조건 줘야한다. -->
	<!-- 해당 댓글의 좋아요를 한 회원 검색 -->
	<select id="selectOneBoardReplyGood" parameterType="map" resultType="GoodVO">
		SELECT 	BOARD_REPLY_ID boardReplyId
				, MEMBER_ID memberId
		FROM	GOOD
		WHERE	BOARD_REPLY_ID = #{boardReplyId}
		AND		MEMBER_ID = #{memberId}
	</select>
	
	<!-- 해당 댓글의 싫어요 한 회원 검색 -->
	<select id="selectOneBoardReplyBad" parameterType="map" resultType="BadVO">
		SELECT 	BOARD_REPLY_ID boardReplyId
				, MEMBER_ID memberId
		FROM	BAD
		WHERE	BOARD_REPLY_ID = #{boardReplyId}
		AND		MEMBER_ID = #{memberId}
	</select>
	
	
</mapper>